import { Client } from '@elastic/elasticsearch';

class ElasticsearchConnection {
    private client: Client | null = null;
    private status: { connected: boolean } = { connected: false };

    constructor() {
        this.connectWithRetry(); // Automatically attempt to connect when instantiated
    }

    // Method to initialize Elasticsearch connection with retries
    public async connectWithRetry() {
        let retries = 0;
        const maxRetries = 10;

        while (retries < maxRetries) {
            retries++;
            console.log(`Elasticsearch connection attempt ${retries}/${maxRetries}`);
            const client = await this.connectToElasticsearch();

            if (client) {
                this.client = client; // Set the connected Elasticsearch client
                return;
            }

            console.log(`Retry attempt ${retries} failed. Retrying in 1 second...`);
            await new Promise((resolve) => setTimeout(resolve, 1000));
        }

        console.error('Unable to connect to Elasticsearch after multiple attempts.');
    }

    // Function to attempt connection to Elasticsearch
    private async connectToElasticsearch(): Promise<Client | null> {
        const client = new Client({
            node: process.env.ELASTICSEARCH_URL,  // Elasticsearch URL from environment variables
            auth: {
                username: process.env.ELASTICSEARCH_USERNAME,  // Optional, if security is enabled
                password: process.env.ELASTICSEARCH_PASSWORD,  // Optional, if security is enabled
            }
        });

        try {
            console.log('Attempting to connect to Elasticsearch...');
            const health = await client.cat.health();
            console.log('Elasticsearch connection successful:', health);
            this.status.connected = true; // Update status on successful connection
            return client;
        } catch (error) {
            console.error('Error connecting to Elasticsearch:', error.message);
            this.status.connected = false; // Update status on failure
            return null;
        }
    }

    // Method to get the Elasticsearch client
    public getClient(): Client | null {
        return this.client;
    }

    // Method to check the connection status
    public getStatus(): { connected: boolean } {
        return this.status;
    }
}

export default ElasticsearchConnection;
